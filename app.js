// Import required libraries
const inquirer = require("inquirer");
const connection = require("./lib/Database");
const Department = require("./lib/Department");
const Role = require("./lib/Role");
const Employee = require("./lib/Employee");

// main function allows user to select action
const main = () => {
    // set question for main navigation
    const mainQuestions = [
        {
            "name": "action",
            "type": "list",
            "message": "What would you like to do?",
            "choices": [
                "Add Department",
                "View Departments",
                "Update Department",
                "Delete Department",
                "Add Role",
                "View Roles",
                "Update Role",
                "Delete Role",
                "Add Employee",
                "View Employees",
                "Update Employee",
                "Delete Employee",
                "Quit"]
        }
    ]

    // get user input and route to desired function
    inquirer.prompt(mainQuestions).then(response => {
        switch (response.action) {
            case "Add Department":
                addDepartment();
                return;
            case "View Departments":
                Department.viewDepartments().then(() => main());
                return;
            case "Update Department":
                updateDepartment();
                break;
            case "Delete Department":
                deleteDepartment();
                break;
            case "Add Role":
                addRole();
                return;
            case "View Roles":
                Role.viewRoles().then(() => { main() });
                return;
            case "Update Role":
                updateRole();
                break;
            case "Delete Role":
                deleteRole();
                break;
            case "Add Employee":
                addEmployee();
                return;
            case "View Employees":
                Employee.viewEmployees().then(() => main())
                return;
            case "Update Employee":
                updateEmployee();
                break;
            case "Delete Employee":
                deleteEmployee();
                break;
            default:
                connection.end();
                return;
        }
    })
}
// call main function on load
main();

// add department to database function 
const addDepartment = async () => {
    // list of questions for user to create department
    const addDepartmentquestions = [
        {
            "name": "name",
            "type": "input",
            "message": "Enter department name: "
        }
    ]

    // get user input
    const response = await inquirer.prompt(addDepartmentquestions);

    // create new department
    const department = new Department(response.name);

    // call save department which returns id generated by database and set it as department's id
    department.setId(await department.saveDepartmentToDatabase());

    // display department to user
    department.displayDepartment();

    // call main function
    main();

}

// update department in database function
const updateDepartment = async () => {
    // get list of departments
    const departments = await Department.getDepartments();

    // get list of questions to edit department
    const updateDepartmentQuestions = [
        {
            "name": "department",
            "type": "list",
            "message": "Select a department to edit",
            "choices": departments
        },
        {
            "name": "name",
            "type": "input",
            "message": "Enter new department name: "
        }
    ];

    // get user input
    const response = await inquirer.prompt(updateDepartmentQuestions);

    // create department object from user input
    const department = new Department(response.name, response.department.id);

    // save and display new department
    department.updateDepartmentInDatabase();
    department.displayDepartment();

    // return to main
    main();
}

// delete department from database function
const deleteDepartment = async () => {

    // get list of departments
    const departments = await Department.getDepartments();

    // inquirer questions 
    const deleteDepartmentQuestions = [
        {
            "name": "department",
            "type": "list",
            "message": "Select a department to delete",
            "choices": departments
        }
    ];

    // get department to delete from user
    const response = await inquirer.prompt(deleteDepartmentQuestions);

    // create new department object
    const department = new Department(response.department.name, response.department.id);

    // delete department and return to main
    department.deleteDepartmentFromDatabase();

    main();
}

// add new role to database function
const addRole = async () => {

    // get list of departments
    const list = await Department.getDepartments();

    // inquirer questions
    const addRoleQuestions = [
        {
            "name": "title",
            "type": "input",
            "message": "Enter role title: "
        },
        {
            "name": "salary",
            "type": "input",
            "message": "Enter role salary: "
        },
        {
            "name": "department",
            "type": "list",
            "message": "Select role department: ",
            "choices": list
        }
    ]

    // get user input
    const response = await inquirer.prompt(addRoleQuestions)

    // create new department object to include in role
    const department = new Department(response.department.name, response.department.id);

    // create new role object
    const role = new Role(response.title, response.salary, department);

    // save role in database, return id created by database and set as object id
    role.setId(await role.saveRoleToDatabase());

    // display role and call main
    role.displayRole();

    main();

}

// update role in database function
const updateRole = async () => {

    // get list of departments and roles
    const departments = await Department.getDepartments();
    const roles = await Role.getRoles();

    // inquirer questions
    const editRoleQuestions = [
        {
            "name": "role",
            "type": "list",
            "message": "Select role to edit",
            "choices": roles
        },
        {
            "name": "title",
            "type": "input",
            "message": "Enter role title: "
        },
        {
            "name": "salary",
            "type": "input",
            "message": "Enter role salary: "
        },
        {
            "name": "department",
            "type": "list",
            "message": "Select role department: ",
            "choices": departments
        }
    ]

    // get user input
    const response = await inquirer.prompt(editRoleQuestions);

    // create department object for use in role
    const department = new Department(response.department.name, response.department.id);
    // create role object
    const role = new Role(response.title, response.salary, department, response.role.role_id);

    // update role in database and log success
    console.log((await role.updateRoleInDatabase()));

    // display role and return to main
    role.displayRole();

    main();

}

//  delete role from database function
const deleteRole = async () => {

    // get department and role lists
    const departments = await Department.getDepartments();
    const roles = await Role.getRoles();

    // inquirer questions
    const deleteRoleQuestions = [
        {
            "name": "role",
            "type": "list",
            "message": "Select role to delete",
            "choices": roles
        }
    ];

    // get employee input
    const response = inquirer.prompt(deleteRoleQuestions);

    // create new role object
    const role = new Role(response.title, response.salary, new Department(), response.role.role_id);

    // delete role, inform user, call main()
    role.deleteRole();
    console.log(`Role deleted successfully`);

    main();

}

// add employee to database function
const addEmployee = async () => {
    // get list of roles and employees
    const roles = await Role.getRoles();
    const employees = await Employee.getEmployees();

    // add option for no manager
    employees.push({ name: "none", values: { id: 0 } });

    // inquirer questions
    const addEmployeeQuestions = [
        {
            "name": "firstName",
            "type": "input",
            "message": "Enter first name: "
        },
        {
            "name": "lastName",
            "type": "input",
            "message": "Enter Last Name: "
        },
        {
            "name": "role",
            "type": "list",
            "message": "Select role: ",
            "choices": roles
        },
        {
            "name": "manager",
            "type": "list",
            "message": "Select a manager",
            "choices": employees
        }
    ];

    // get employee input
    const response = await inquirer.prompt(addEmployeeQuestions);

    // create new department, role, employee, and manager objects
    const department = new Department(response.role.department, response.role.department_id);
    const role = new Role(response.role.title, response.role.salary, department, response.role.role_id);
    const manager = new Employee(response.manager.first_name, response.manager.last_name, {}, 0, response.manager.id || 0)

    const employee = new Employee(response.firstName, response.lastName, role, manager);

    // add employee, get id created by database and set object id
    employee.setId(await employee.saveEmployeeToDatabase());

    // display employee and return to main()
    employee.displayEmployee();

    main();

}

// update employee in database function
const updateEmployee = async () => {

    // get role and employee lists
    const roles = await Role.getRoles();
    const employees = await Employee.getEmployees();

    // inquirer questions
    const updateEmployeeQuestions = [
        {
            "name": "employee",
            "type": "list",
            "message": "Select employee to update",
            "choices": employees
        },
        {
            "name": "firstName",
            "type": "input",
            "message": "Enter first name: "
        },
        {
            "name": "lastName",
            "type": "input",
            "message": "Enter Last Name: "
        },
        {
            "name": "role",
            "type": "list",
            "message": "Select role: ",
            "choices": roles
        },
        {
            "name": "manager",
            "type": "list",
            "message": "Select a manager",
            "choices": employees
        }
    ];

    const response = await inquirer.prompt(updateEmployeeQuestions);

    // create department, role, manager, and employee objects
    const department = new Department(response.role.department, response.role.department_id);
    const role = new Role(response.role.title, response.role.salary, department, response.role.role_id);
    const manager = new Employee(response.manager.first_name, response.manager.last_name, {}, 0, response.manager.id || 0)
    const employee = new Employee(response.firstName, response.lastName, role, manager, response.employee.id);

    // update employee
    employee.updateEmployeeInDatabase();

    // display new employee and call main()
    employee.displayEmployee();

    main();

}

// delete employee from database function
const deleteEmployee = async () => {

    // get list of employees
    const employees = await Employee.getEmployees();

    // inquirer questions
    const deleteEmployeeQuestions = [
        {
            "name": "employee",
            "type": "list",
            "message": "Select employee to delete: ",
            "choices": employees
        }
    ]

    // get user input
    const response = await inquirer.prompt(deleteEmployeeQuestions);

    // create new employee object
    const employee = new Employee("", "", {}, {}, response.employee.id);

    // delete employee
    employee.deleteEmployeeFromDatabase();

    // inform user and call main()
    console.log("Employee deleted successfully.")
    main();
    
}